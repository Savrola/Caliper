package com.loanetworks.nahanni.elephant2.raw.dbdata;

import com.loanetworks.nahanni.elephant2.raw.ElephantConnection;
import com.loanetworks.nahanni.elephant2.raw.ti.TableInfo;

import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;

/**
 * The new 'streamlined' tuple instance carrier base class.
 * <p/>
 * Copyright Â© 2012 Daniel Boulet.
 */

public abstract class Tuple2 {

    private final TableInfo _tableInfo;

    private final boolean[] _dirty;

    private boolean _allDirty;

    protected Tuple2() {
        super();
        _tableInfo = null;
        _dirty = null;
    }

    protected Tuple2( TableInfo tableInfo ) {
        super();

        _tableInfo = tableInfo;
        _dirty = new boolean[tableInfo.getColumnCount()];

    }

    protected TableInfo getTi() {

        return _tableInfo;

    }

    public void setDirty( int columnIx ) {

        _dirty[columnIx] = true;

    }

    public void setAllDirty() {

        _allDirty = true;

    }

    /**
     * Construct a string representation of a SELECT statement that will return the current values of the sequences
     * associated with this tuple type's SERIAL columns.
     * <p/>
     * <b>IMPORTANT:</b> this method is inherently Postgres dependent in its use of the <tt>CURRVAL()</tt>.
     *
     * @param sequenceNames the sequence names associated with this tuple type's SERIAL columns.
     *
     * @return the SELECT statement.
     */

    private String constructCurvalSelect( String[] sequenceNames ) {

        String selectQuery = "SELECT ";
        for ( String sequenceName : sequenceNames ) {

            selectQuery += "CURRVAL('" + sequenceName + "') ";

        }

        // Testing time
        // selectQuery += ", CURRVAL('" + sequenceNames[0] + "')";

        return selectQuery;

    }

    public BundledKeys executeStringInsertStatement(
            String insertStatement,
            ElephantConnection elephantConnection,
            boolean retrieveAutogeneratedKeys
    )
            throws
            SQLException {

        Statement statement = elephantConnection.c().createStatement();
        statement.executeUpdate( insertStatement );

        long[] keys = null;

        String[] sequenceNames = getTi().getSequenceNames();
        if ( retrieveAutogeneratedKeys && sequenceNames.length > 0 ) {

            keys = retrieveKeys( elephantConnection, sequenceNames );

        }

        return new BundledKeys( keys, getTi().getSerialColumnNumbers() );

    }

    protected BundledKeys executeInsertStatement(
            String insertStatement,
            PreparedStatement ps,
            ElephantConnection elephantConnection,
            String[] sequenceNames,
            int[] serialColumnNumbers,
            boolean retrieveAutogeneratedKeys
    )
            throws
            SQLException {

        ps.executeUpdate();

        long[] keys = null;

        if ( retrieveAutogeneratedKeys && sequenceNames.length > 0 ) {

            keys = retrieveKeys( elephantConnection, sequenceNames );

        }

        return new BundledKeys( keys, serialColumnNumbers );

    }

    private long[] retrieveKeys( ElephantConnection elephantConnection, String[] sequenceNames )
            throws SQLException {

        // System.out.println("getting auto-generated keys");

        long[] keys = new long[sequenceNames.length];

        String queryString = constructCurvalSelect( sequenceNames );

        Statement queryStatement = elephantConnection.c().createStatement();

        try {

            ResultSet rs = queryStatement.executeQuery( queryString );
            try {

                if ( rs.next() ) {

                    // System.out.println("getting row");
                    for ( int i = 0; i < keys.length; i += 1 ) {

                        keys[i] = rs.getLong( i + 1 );

                    }

                }

            } finally {

                rs.close();

            }

        } finally {

            queryStatement.close();

        }

        return keys;

    }

}
